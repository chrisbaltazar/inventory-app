{% embed 'partials/_form-wrapper.html.twig' %}

    {% block form_fields %}

        {% include 'partials/_form-field.html.twig' with {'field': form.event, 'label': 'Evento'} %}

        {% include 'partials/_form-field.html.twig' with {'field': form.user, 'label': 'Persona'} %}

        {% include 'partials/_form-field.html.twig' with {'field': form.region, 'label': 'Región'} %}

        {% if inventory|length %}
            <div class="mt-4 p-2 mx-auto border rounded shadow">
                <h3>Selección de piezas:</h3>
                <div class="mt-3">
                    <table class="table table-striped table-hover">
                        {% for item in inventory %}
                            {% set badge = 'secondary' %}
                            {% set badge = item.gender is same as 'W' ? 'warning' : badge %}
                            {% set badge = item.gender is same as 'M' ? 'primary' : badge %}
                            <tr>
                                <td>
                                    <label>
                                        <strong>{{ item.name }}</strong>
                                        <span class="badge text-bg-{{ badge }}">{{ item.genderName }}</span>
                                    </label>
                                </td>
                                <td>
                                    <select class="form-control loan-item" name="loan[item][]">
                                        <option value="">Seleccione...</option>
                                        {% for key,value in item.values %}
                                            <option value="{{ key }}">{{ value }}</option>
                                        {% endfor %}
                                    </select>
                                </td>
                            </tr>
                        {% endfor %}
                    </table>
                </div>
                <div class="mt-2 mx auto text-center">
                    <div class="alert alert-danger alert-dismissible fade show" style="display: none" role="alert"
                         id="errorPanel">
                        <span></span>
                    </div>

                    <button type="button" class="btn btn-success position-relative" id="btnSave">
                        <i class="fas fa-check"></i> Asignar todo
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                              id="countPieces">0</span>
                    </button>
                </div>
            </div>
        {% endif %}

    {% endblock %}

{% endembed %}

<script>
    document.addEventListener('turbo:load', () => {
        document.querySelectorAll('select#loan_region').forEach(function (el) {
            if (el.dataset.bound) {
                return
            }

            el.addEventListener('change', () => handleNavigation(true))

            el.dataset.bound = 'true'
        })

        document.querySelectorAll('button#btnSave').forEach(el => el.addEventListener('click', async function () {
                const button = document.getElementById('btnSave')
                button.setAttribute('dissabled', 'disabled')
                showError()

                const form = document.querySelector('form')
                const data = new FormData(form)
                await saveForm(data)
                button.removeAttribute('disabled')
            })
        )

        document.querySelectorAll('select.loan-item').forEach(function (el) {
            if (el.dataset.boundChange) {
                return
            }

            el.addEventListener('change', () => countTotalPieces())

            el.dataset.boundChange = 'true'
        })
    })

    const saveForm = async (formData) => {
        try {
            const response = await fetch('{{ path('app_loan_store') }}', {
                method: 'POST',
                body: formData,
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw errorData;
            }

            const data = await response.json();

            handleNavigation(false)
        } catch (e) {
            await showError(e.message)
            console.error('Fetch error:', e?.error);
        }
    }

    const handleNavigation = (withQuery) => {
        const event = document.querySelector('select#loan_event')
        const user = document.querySelector('select#loan_user')
        const region = document.querySelector('select#loan_region')
        const url = new URL('{{ url('app_loan_new') }}')
        url.pathname += '/' + event.value + '/' + user.value
        if (withQuery) {
            url.searchParams.append('region', region.value)
        }

        location.href = url.href
    }

    const showError = (error = '') => {
        console.log(error)
        const panel = document.getElementById('errorPanel')
        const errorMessage = panel.querySelector('span')
        errorMessage.textContent = error
        panel.style.display = error ? 'block' : 'none'
    }

    const countTotalPieces = () => {
        const items = Array.from(document.querySelectorAll('select.loan-item'))
        const total = items.filter(el => el.value.trim() !== '');
        document.getElementById('countPieces').textContent = total.length
    }
</script>